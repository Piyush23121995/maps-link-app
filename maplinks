import streamlit as st
import pandas as pd
import urllib.parse
import io
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload
from googleapiclient.errors import HttpError

st.set_page_config(page_title="Maps Link Generator via Drive")
st.title("üìç Google Maps Link Generator + Google Drive")

# Load credentials from Streamlit secrets
SCOPES = ['https://www.googleapis.com/auth/drive']
try:
    service_account_info = json.loads(st.secrets["GOOGLE_SERVICE_ACCOUNT_JSON"])
    credentials = service_account.Credentials.from_service_account_info(
        service_account_info, scopes=SCOPES)
    drive_service = build('drive', 'v3', credentials=credentials)
except Exception as e:
    st.error(f"Failed to authenticate Google Drive API: {e}")
    st.stop()

FOLDER_ID = st.secrets["GDRIVE_FOLDER_ID"]

@st.cache_data(ttl=300)
def list_files(folder_id):
    try:
        query = f"'{folder_id}' in parents and (mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' or mimeType='text/csv')"
        results = drive_service.files().list(q=query, spaces='drive', fields='files(id,name)').execute()
        return results.get('files', [])
    except HttpError as err:
        st.error(f"Google Drive API error: {err}")
        return []

def download_file_to_memory(file_id):
    try:
        request = drive_service.files().get_media(fileId=file_id)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while not done:
            status, done = downloader.next_chunk()
        fh.seek(0)
        return fh
    except HttpError as err:
        st.error(f"Error downloading file: {err}")
        return None

def generate_link(location):
    return f"https://www.google.com/maps/search/?api=1&query={urllib.parse.quote(location)}"

def upload_to_drive(df, original_name, folder_id):
    try:
        output = io.BytesIO()
        df.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)
        media = MediaFileUpload(io.BytesIO(output.getvalue()), mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        file_metadata = {
            'name': f"{original_name}_with_links.xlsx",
            'parents': [folder_id]
        }
        new_file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        return new_file.get('id')
    except HttpError as err:
        st.error(f"Error uploading file: {err}")
        return None

# --- App Logic ---
files = list_files(FOLDER_ID)
if not files:
    st.warning("No Excel or CSV files found in the specified Google Drive folder.")
    st.stop()

file_names = [f['name'] for f in files]
selected_file = st.selectbox("Select a file", file_names)

if st.button("Generate Links"):
    file_meta = next((f for f in files if f['name'] == selected_file), None)
    if not file_meta:
        st.error("Selected file not found.")
        st.stop()

    file_buffer = download_file_to_memory(file_meta['id'])
    if file_buffer is None:
        st.error("Failed to download the selected file.")
        st.stop()

    try:
        if selected_file.lower().endswith(".csv"):
            df = pd.read_csv(file_buffer)
        else:
            df = pd.read_excel(file_buffer)
    except Exception as e:
        st.error(f"Error reading file: {e}")
        st.stop()

    if 'Location Name' not in df.columns:
        st.error("‚ùå File must contain 'Location Name' column.")
        st.stop()

    df['Google Maps Link'] = df['Location Name'].apply(generate_link)
    st.success("‚úÖ Links generated!")
    st.dataframe(df.head())

    uploaded_id = upload_to_drive(df, selected_file.split('.')[0], FOLDER_ID)
    if uploaded_id:
        st.success(f"‚úÖ Uploaded updated file to Drive (file ID: {uploaded_id})")
    else:
        st.error("Failed to upload the updated file to Drive.")
